/// Generates a container for the float grid
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Float grid
/// @access public
/// @param {string} $selector                 [row]                   - The selector name of the container
/// @param {int}    $hdFullSteps              [0]                     - Number of columns per row on Full HD
/// @param {int}    $hdReadySteps             [$hdFullSteps]          - Number of columns per row on HD Ready
/// @param {int}    $tabletLandscapeSteps     [$hdReadySteps]         - Number of columns per row on Tablet landscape
/// @param {int}    $tabletPortraitSteps      [$tabletLandscapeSteps] - Number of columns per row on Tablet portrait
/// @param {int}    $smartphoneLandscapeSteps [1]                     - Number of columns per row on Smartphone landscape
/// @param {int}    $smartphonePortraitSteps  [1]                     - Number of columns per row on Smartphone portrait
/// @example scss Default usage, it generates a `row` selector rule which will NOT treat child elements as columns
///   @include addFloatGridContainer();
/// @example css CSS generated
/// .row,
/// .row * {
///   -webkit-box-sizing: border-box;
///   -khtml-box-sizing: border-box;
///   -moz-box-sizing: border-box;
///   -ms-box-sizing: border-box;
///   -o-box-sizing: border-box;
///   box-sizing: border-box;
/// }
///
/// .row {
///   padding-top: 20px;
///   width: 100%;
///   overflow: auto;
///   clear: both;
/// }
///
/// @example scss Generates a `row-container` selector rule with 4 HD columns steps, 3 tablet columns steps and 1 column mobile steps
///   @include addFloatGridContainer(row-container, 4, 4, 3, 3);
/// @example css CSS generated
/// .row-container,
/// .row-container * {
///   -webkit-box-sizing: border-box;
///   -khtml-box-sizing: border-box;
///   -moz-box-sizing: border-box;
///   -ms-box-sizing: border-box;
///   -o-box-sizing: border-box;
///   box-sizing: border-box;
/// }
///
/// .row-container {
///   padding-top: 20px;
///   width: 100%;
///   overflow: auto;
///   clear: both;
/// }
///
/// .row-container > * {
///   min-height: 1px;
///   padding-left: 20px;
///   padding-right: 20px;
///   padding-bottom: 20px;
///   float: left;
///   position: relative;
///   width: 25%;
/// }
///
/// \@media only screen and (min-width: 1px) and (max-width: 479px) {
///   .row-container > * {
///     width: 100%;
///   }
///   .row-container > *:nth-child(1n+1) {
///     clear: both;
///   }
/// }
/// \@media only screen and (min-width: 480px) and (max-width: 767px) {
///   .row-container > * {
///     width: 100%;
///   }
///   .row-container > *:nth-child(1n+1) {
///     clear: both;
///   }
/// }
/// \@media only screen and (min-width: 768px) and (max-width: 1023px), only print {
///   .row-container > * {
///     width: 33.33333%;
///   }
///   .row-container > *:nth-child(3n+1) {
///     clear: both;
///   }
/// }
/// \@media only screen and (min-width: 1024px) and (max-width: 1279px) {
///   .row-container > * {
///     width: 33.33333%;
///   }
///   .row-container > *:nth-child(3n+1) {
///     clear: both;
///   }
/// }
/// \@media only screen and (min-width: 1280px) and (max-width: 1799px) {
///   .row-container > * {
///     width: 25%;
///   }
///   .row-container > *:nth-child(4n+1) {
///     clear: both;
///   }
/// }
/// \@media only screen and (min-width: 1800px) {
///   .row-container > * {
///     width: 25%;
///   }
///   .row-container > *:nth-child(4n+1) {
///     clear: both;
///   }
/// }


@mixin addFloatGridContainer(
    $selector                 : row,
    $hdFullSteps              : 0,
    $hdReadySteps             : $hdFullSteps,
    $tabletLandscapeSteps     : $hdReadySteps,
    $tabletPortraitSteps      : $tabletLandscapeSteps,
    $smartphoneLandscapeSteps : 1,
    $smartphonePortraitSteps  : 1
    ) {

    .#{$selector},
    .#{$selector} * {
        @include box-sizing(border-box);
    }
    .#{$selector} {
        padding-top:$vertical-padding;
        width:100%;
        overflow:auto;
        clear:both;
    }
    @include _checkAutoClear($hdFullSteps, $hdReadySteps, $tabletLandscapeSteps, $tabletPortraitSteps, $smartphoneLandscapeSteps, $smartphonePortraitSteps, $selector);
}

/// Generates a columns set for the float grid
/// @author <a href="http://twitter.com/vttrx">Vittorio Vittori</a>
/// @group Float grid
/// @access public
/// @param {int}     $hdSteps                  [12]                  - Column steps for HD viewports
/// @param {int}     $tabletSteps              [$hdSteps]            - Column steps for Tablet viewports
/// @param {int}     $smartphoneSteps          [$tabletSteps]        - Column steps for Mobile viewports
/// @param {string}  $hdViewportPrefix         ["hd-"]               - Columns rule HD viewport prefix
/// @param {string}  $tabletViewportPrefix     ["tablet-"]           - Columns rule Tablet viewport prefix
/// @param {string}  $smartphoneViewportPrefix ["mobile-"]           - Columns rule Mobile viewport prefix
/// @param {string}  $fillFromViewport         ["mobile-landscape"]  - The viewport step where columns will be set to `width:100%`
/// @param {boolean} $viewTotalColumns         [true]                - Choose to see or not to see total columns at the end of the rule name
/// @param {int}     $columnsSeparator         ["-of-"]              - Columns separator, only applied if `$viewTotalColumns` is `true`
/// @param {int}     $useHdRules               [true]                - Enables HD viewports to be generated
/// @param {int}     $useTabletRules           [true]                - Enables Tablet viewports to be generated
/// @param {int}     $useSmartphoneRules       [true]                - Enables Mobile viewports to be generated

@mixin addFloatGridColumns($hdSteps:12, $tabletSteps:$hdSteps, $smartphoneSteps:$tabletSteps, $hdViewportPrefix:"hd-", $tabletViewportPrefix:"tablet-", $smartphoneViewportPrefix:"mobile-", $fillFromViewport:"mobile-landscape", $viewTotalColumns:true, $columnsSeparator:"-of-", $useHdRules:true, $useTabletRules:true, $useSmartphoneRules:true) {

    @media #{$from-smartphone-portrait} {
        // Smartphone portrait
        @include _addFloatGridColumnSet($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
    }

    @media #{$from-tablet-portrait} {
        // Tablet portrait
        @include _addFloatGridColumnSet($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
    }

    @media #{$from-hd-ready} {
        // HD Ready
        @include _addFloatGridColumnSet($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
        @include _addFloatGridColumnSet($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
    }

    @include _addClearRule($only-smartphone, $smartphoneViewportPrefix);
    @include _addClearRule($only-tablet, $tabletViewportPrefix);
    @include _addClearRule($only-hd, $hdViewportPrefix);

    @include _addFillToColumnSet($tabletViewportPrefix, $tabletSteps, $fillFromViewport, $viewTotalColumns, $columnsSeparator);
    @include _addFillToColumnSet($hdViewportPrefix, $hdSteps, $fillFromViewport, $viewTotalColumns, $columnsSeparator);
    @include _preventSmartphoneColumnSet($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
}

@mixin _addClearRule($rule, $prefix) {
    @media #{$rule} {
        .#{$prefix}clear {
            clear: both;
        }
    }
}

@mixin setFloatGridContainer(
    $hdFullSteps              : 0,
    $hdReadySteps             : $hdFullSteps,
    $tabletLandscapeSteps     : $hdReadySteps,
    $tabletPortraitSteps      : $tabletLandscapeSteps,
    $smartphoneLandscapeSteps : 1,
    $smartphonePortraitSteps  : 1
    ) {

    padding-top : $vertical-padding;
    width       : 100%;
    overflow    : auto;
    clear       : both;

    @include box-sizing(border-box);

    * {
        @include box-sizing(border-box);
    }

    @include _checkAutoClear($hdFullSteps, $hdReadySteps, $tabletLandscapeSteps, $tabletPortraitSteps, $smartphoneLandscapeSteps, $smartphonePortraitSteps);
}

@mixin setFloatGridColumn(
    $usePadding          : false,
    $hdFullStep          : 0,
    $hdReadyStep         : 0,
    $tabletLandscapeStep : 0,
    $tabletPortraitStep  : 0,
    $mobileLandscapeStep : 0,
    $mobilePortraitStep  : 0,
    $totalSteps          : 12
    ) {

    @if $usePadding != false and $usePadding != true {
        @if $mobilePortraitStep != 0 {
            $totalSteps : $mobilePortraitStep;
        }
        $mobilePortraitStep  : $mobileLandscapeStep;
        $mobileLandscapeStep : $tabletPortraitStep;
        $tabletPortraitStep  : $tabletLandscapeStep;
        $tabletLandscapeStep : $hdReadyStep;
        $hdReadyStep         : $hdFullStep;
        $hdFullStep          : $usePadding;
    }

    width: 100%;
    @include _setColumnBehavior(true, left, true, $usePadding);

    @include _setFloatGridColumn($from-smartphone-portrait,  $mobilePortraitStep,  $totalSteps);
    @include _setFloatGridColumn($from-smartphone-landscape, $mobileLandscapeStep, $totalSteps);
    @include _setFloatGridColumn($from-tablet-portrait,      $tabletPortraitStep,  $totalSteps);
    @include _setFloatGridColumn($from-tablet-landscape,     $tabletLandscapeStep, $totalSteps);
    @include _setFloatGridColumn($from-hd-ready,             $hdReadyStep,         $totalSteps);
    @include _setFloatGridColumn($from-hd-full,              $hdFullStep,          $totalSteps);
}

@mixin _setFloatGridColumn($rule, $step, $totalColumns) {
    @if $step != false and $step != 0 {
        @media #{$rule} {
            @include _setFloatGridColumnStep($step, $totalColumns);
        }
    }
}

@mixin setFloatGridOffset(
    $mobilePortraitStep  : 0,
    $mobileLandscapeStep : 0,
    $tabletPortraitStep  : 0,
    $tabletLandscapeStep : 0,
    $hdReadyStep         : 0,
    $hdFullStep          : 0,
    $totalSteps          : 12
    ) {

    margin-left: 0;

    @include _setFloatGridOffset($from-smartphone-portrait,  $mobilePortraitStep,  $totalSteps);
    @include _setFloatGridOffset($from-smartphone-landscape, $mobileLandscapeStep, $totalSteps);
    @include _setFloatGridOffset($from-tablet-portrait,      $tabletPortraitStep,  $totalSteps);
    @include _setFloatGridOffset($from-tablet-landscape,     $tabletLandscapeStep, $totalSteps);
    @include _setFloatGridOffset($from-hd-ready,             $hdReadyStep,         $totalSteps);
    @include _setFloatGridOffset($from-hd-full,              $hdFullStep,          $totalSteps);
}

@mixin _setFloatGridOffset($rule, $step, $totalColumns) {
    @if $step != false and $step != 0 {
        @media #{$rule} {
            @include _setColumnMarginOffsetStep($step, $totalColumns)
        }
    }
}

@mixin addFloatGridOffset(
    $hdSteps                  : 12,
    $tabletSteps              : $hdSteps,
    $smartphoneSteps          : $tabletSteps,
    $hdViewportPrefix         : "hd-offset-",
    $tabletViewportPrefix     : "tablet-offset-",
    $smartphoneViewportPrefix : "smartphone-offset-",
    $fillFromViewport         : "smartphone-landscape",
    $viewTotalColumns         : true,
    $columnsSeparator         : "-of-",
    $useHdRules               : true,
    $useTabletRules           : true,
    $useSmartphoneRules       : true
    ) {

    @media #{$from-smartphone-portrait} {
        // Smartphone portrait
        @include _addColumnMarginOffset($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);

        .#{$smartphoneViewportPrefix}disabled {
            margin-left: 0;
        }
    }

    @media #{$from-tablet-portrait} {
        // Tablet portrait
        @include _addColumnMarginOffset($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
    }

    @media #{$from-hd-ready} {
        // HD Ready
        @include _addColumnMarginOffset($smartphoneViewportPrefix, $smartphoneSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($tabletViewportPrefix, $tabletSteps, $viewTotalColumns, $columnsSeparator);
        @include _addColumnMarginOffset($hdViewportPrefix, $hdSteps, $viewTotalColumns, $columnsSeparator);
    }

    @media #{$only-hd} {
        .#{$hdViewportPrefix}disabled {
            margin-left: 0;
        }
    }

    @media #{$only-tablet} {
        .#{$tabletViewportPrefix}disabled {
            margin-left: 0;
        }
    }
}

@mixin _checkAutoClear(
    $hdFullSteps,
    $hdReadySteps,
    $tabletLandscapeSteps,
    $tabletPortraitSteps,
    $smartphoneLandscapeSteps,
    $smartphonePortraitSteps,
    $selector:false
    ){
    @if $hdFullSteps > 0 {
        // Media queries for selectors active from a specific resolution or higher

        @if $selector != false {
            .#{$selector} > * {
                min-height: 1px;
                @include _setColumnBehavior(true, left, false, true);
                @include _setFloatGridColumnStep(1, $hdFullSteps);
            }
        } @else {
            > * {
                min-height: 1px;
                @include _setColumnBehavior();
                @include _setFloatGridColumnStep(1, $hdFullSteps);
            }
        }
        @include _checkAutoClearViewport($only-smartphone-portrait,  $smartphonePortraitSteps,  $selector);
        @include _checkAutoClearViewport($only-smartphone-landscape, $smartphoneLandscapeSteps, $selector);
        @include _checkAutoClearViewport($only-tablet-portrait,      $tabletPortraitSteps,      $selector);
        @include _checkAutoClearViewport($only-tablet-landscape,     $tabletLandscapeSteps,     $selector);
        @include _checkAutoClearViewport($only-hd-ready,             $hdReadySteps,             $selector);
        @include _checkAutoClearViewport($only-hd-full,              $hdFullSteps,              $selector);
    }
}

@mixin _checkAutoClearViewport($viewport, $steps, $selector:false) {
    @media #{$viewport} {
        @if $selector != false {
            .#{$selector} > * {
                @include _setFloatGridColumns($steps);
            }
        } @else {
            > * {
                @include _setFloatGridColumns($steps);
            }
        }
    }
}

@mixin _addFloatGridColumnSet($prefix, $totalSteps, $viewTotalColumns:true, $columnsSeparator:"-of-") {
    $startIndex : $totalSteps;
    @include _loopFloatGridColumnSet($totalSteps, $prefix, $startIndex, $viewTotalColumns, $columnsSeparator, "");
}

@mixin _addFillToColumnSet($prefix, $totalSteps, $fillViewport:"smartphone-landscape", $viewTotalColumns:true, $columnsSeparator:"-of-") {
    $startIndex : $totalSteps;
    @include _loopFloatGridColumnSetFill($prefix, $totalSteps, $fillViewport, $startIndex, $viewTotalColumns, $columnsSeparator);
}

@mixin _preventSmartphoneColumnSet($prefix:col-, $totalSteps:12, $viewTotalColumns:true, $columnsSeparator:"-of-") {
    @if $use-smartphone-landscape == true {
        $startIndex : $totalSteps;
        @media #{$till-tablet-portrait} {
            // Smartphone landscape
            @include _loopSmartphoneColumnSet($prefix, $totalSteps, $startIndex, $viewTotalColumns, $columnsSeparator);
        }
    }
}

@mixin _loopFloatGridColumnSet ($total, $prefix, $index, $viewTotalColumns, $columnsSeparator, $prevRule:""){
    $nextRule:"";
    @if $viewTotalColumns == true{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
            }
            @else{
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
                }
            }

            @if $index > 0{
                .#{$prefix}#{$index}#{$columnsSeparator}#{$total} {
                    @include _setFloatGridColumnStep($index, $total);
                }
            }

            @if $index == 0{
                #{$nextRule} {
                    @include _setColumnBehavior();
                }
            }

            $index: $index - 1;
        }
    }
    @else{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}";
            }
            @else {
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}";
                }
            }

            @if $index > 0{
                .#{$prefix}#{$index}#{$columnsSeparator}#{$total} {
                    @include _setFloatGridColumnStep($index, $total);
                }
            }

            @if $index == 0{
                #{$nextRule} {
                    @include _setColumnBehavior();
                }
            }

            $index: $index - 1;
        }
    }
}

@mixin _addColumnMarginOffset($prefix:col-, $totalSteps:12, $viewTotalColumns:true, $columnsSeparator:"-of-") {
    $startIndex: $totalSteps;
    @include _loopColumnMarginOffset($totalSteps, $prefix, $startIndex, $viewTotalColumns, $columnsSeparator, "");
}

@mixin _loopColumnMarginOffset ($total, $prefix, $index, $viewTotalColumns, $columnsSeparator, $prevRule:""){
    $nextRule:"";
    @if $viewTotalColumns == true{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
            }
            @else{
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
                }
            }

            @if $index > 0{
                .#{$prefix}#{$index}#{$columnsSeparator}#{$total} {
                    @include _setColumnMarginOffsetStep($index, $total);
                }
            }

            @if $index == 0{
                //
            }

            $index: $index - 1;
        }
    }
    @else{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}";
            }
            @else {
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}";
                }
            }

            @if $index > 0{
                .#{$prefix}#{$index} {
                    @include _setColumnMarginOffsetStep($index, $total);
                }
            }

            @if $index == 0{
                //
            }

            $index: $index - 1;
        }
    }
}

@mixin _setColumnMarginOffsetStep($step, $columns) {
    margin-left:((100% * $step)/$columns);
}

@mixin _loopSmartphoneColumnSet($prefix, $total, $index, $viewTotalColumns, $columnsSeparator){
    @while $index >= 0{
         @if $index > 0 and $viewTotalColumns == true {
            .#{$prefix}#{$index}#{$columnsSeparator}#{$total} {
                @include _setFloatGridColumnStep($index, $total);
            }
        }
        @if $index > 0 and $viewTotalColumns == false {
            .#{$prefix}#{$index} {
                @include _setFloatGridColumnStep($index, $total);
            }
        }
        $index: $index - 1;
    }
}

@mixin _loopFloatGridColumnSetFill ($prefix, $total, $fill, $index, $viewTotalColumns, $columnsSeparator, $prevRule:""){
    $nextRule:"";
    @if $viewTotalColumns == true{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
            }
            @else{
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}#{$columnsSeparator}#{$total}";
                }
            }

            @if $index == 0 and $fill == "tablet-landscape" {
                @media #{$till-hd-ready} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "tablet-portrait" {
                @media #{$till-tablet-landscape} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "mobile-landscape" {
                @media #{$till-tablet-portrait} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "mobile-portrait" {
                @media #{$till-smartphone-landscape} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            $index: $index - 1;
        }
    }
    @else{
        @while $index >= 0{
            @if $index == $total{
                $nextRule: ".#{$prefix}#{$index}";
            }
            @else {
                @if $index > 0{
                    $nextRule: $nextRule + ", .#{$prefix}#{$index}";
                }
            }

            @if $index == 0 and $fill == "tablet-landscape" {
                @media #{$till-hd-ready} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "tablet-portrait" {
                @media #{$till-tablet-landscape} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "mobile-landscape" {
                @media #{$till-tablet-portrait} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }

            @if $index == 0 and $fill == "mobile-portrait" {
                @media #{$till-smartphone-landscape} {
                    // Tablet landscape
                    #{$nextRule} {
                        width: 100%;
                    }
                }
            }


            $index: $index - 1;
        }
    }
}

@mixin _setFloatGridColumns($columns) {
    width:(100%/$columns);
    &:nth-child(#{$columns}n+1) {
        clear:both;
    }
}

@mixin _setFloatGridColumnStep($step, $columns) {
    width:((100% * $step) / $columns);
}

@mixin _setColumnBehavior($usePosition:true, $float:left, $useBorderBox:true, $usePadding:true) {
    @if $usePadding == true {
        padding-left: $horizontal-padding;
        padding-right: $horizontal-padding;
        padding-bottom: $vertical-padding;
    }
    float: left;
    @if $usePosition == true {
        position: relative;
    }
    @if $useBorderBox == true {
        @include box-sizing(border-box);
    }
}
