@mixin -float-row-column ($rules, $total-columns) {
  display: block;
  float: left;
  width: 100%;
  @each $rule, $column-number in $rules {
    @include media($rule...) {
      @if ($row-columns-style == 'classic') {
        width: step($column-number, $total-columns);
        $nth-child: ($total-columns / $column-number) + 1;

        &:nth-child(#{$nth-child}n + #{$nth-child}) {
          clear: both;
        }
      } @else {
        width: 100% / $column-number;
        $nth-child: $column-number + 1;

        &:nth-child(#{$column-number}n + #{$nth-child}) {
          clear: both;
        }
      }
    }
  }
}

/*
  @a-pollo-doc
  @author: Vittorio Vittori
  @title: Float grid
  @category: Mixins
  @code: Example on using the mixin with some static property
    $breakpoints: (
      'mobile-small': 320px,
      'mobile-large': 480px,
      'tablet-small': 768px,
      'tablet-large': 1024px,
      'desktop-small': 1280px,
      'desktop-large': 1800px
    );
    $row-columns-style: 'frontsize';
    $row-columns-name: 'column';
    $spacing: 20px;

    @include block ('row') {
      @include float-row((
        '<=mobile-large': 2,
        ('>mobile-large', '<=tablet-large'): 4,
        '>tablet-large': 5
      )) {
        padding: s(1);
      }
    }
  @css: This is the CSS generated
    .row {
      clear: both;
      display: block;
      width: auto;
    }

    .row::after {
      clear: both;
      content: '';
      display: block;
      height: 1px;
      margin-top: -1px;
      width: 100%;
    }

    .row__column {
      display: block;
      float: left;
      width: 100%;
      padding: 20px;
    }

    @media (max-width: 480px) {
      .row__column {
        width: 50%;
      }
      .row__column:nth-child(2n + 3) {
        clear: both;
      }
    }

    @media (min-width: 481px) and (max-width: 1024px) {
      .row__column {
        width: 25%;
      }
      .row__column:nth-child(4n + 5) {
        clear: both;
      }
    }

    @media (min-width: 1025px) {
      .row__column {
        width: 20%;
      }
      .row__column:nth-child(5n + 6) {
        clear: both;
      }
    }
  @date: 2017-05-04T17:26:24+02:00
  @type: mixin
  @html: Use it to handle a layout with grid columns expected to work with one size
    <div class="row">
      <div class="row__column">
        One
      </div>
      <div class="row__column">
        Two
      </div>
      <div class="row__column">
        Etc.
      </div>
    </div>
  @icon: fa fa-th
  @name: float-row
  @param: {map} ($rules) [null]
          Rules map, based on *include-media* breakpoints
  @param: {int} ($total-columns) [$row-columns-total]
          Number of columns steps, the behavior of the number is based on `$row-columns-style`
  @public: true
  @returns: css
  @text: Generates a row container for float grid systems, it's based on [include-media](http://include-media.com/), checkout vendors documentation post to see how to use it.
  @version: 4.0.0
*/

@mixin float-row ($rules: null, $total-columns: $row-columns-total) {
  clear: both;
  display: block;
  width: auto;

  &::after {
    clear: both;
    content: '';
    display: block;
    height: 1px;
    margin-top: -1px;
    width: 100%;
  }

  @if $rules != null {
    @if $-bem-block-name != '' {
      @if $-bem-element-name == '' {
        @include element ($row-columns-name) {
          @include -float-row-column($rules, $total-columns);
          @content;
        }
      } @else {
        @at-root #{$-bem-block-name}#{$-bem-element-name}-#{$row-columns-name} {
          @include -float-row-column($rules, $total-columns);
          @content;
        }
      }

    } @else {
      .#{$row-columns-name} {
        @include -float-row-column($rules, $total-columns);
        @content;
      }
    }
  }
}

/*
  @a-pollo-doc
  @author: Vittorio Vittori
  @title: Float grid system
  @code: Example on using the mixin with some static property
    $breakpoints: (
      'mobile-small': 320px,
      'mobile-large': 480px,
      'tablet-small': 768px,
      'tablet-large': 1024px,
      'desktop-small': 1280px,
      'desktop-large': 1800px
    );

    .column {
      @include float-col((
          '<=mobile-large': 10,
          '<=tablet-small': 6,
          '<=tablet-large': 4,
          '>tablet-large': 2
      ), 10);
    }
  @css: This is the CSS generated
    .column {
      display: block;
      float: left;
    }

    @media (max-width: 480px) {
      .column {
        width: 100%;
      }
    }

    @media (max-width: 768px) {
      .column {
        width: 60%;
      }
    }

    @media (max-width: 1024px) {
      .column {
        width: 40%;
      }
    }

    @media (min-width: 1025px) {
      .column {
        width: 20%;
      }
    }
  @date: 2017-05-04T17:56:07+02:00
  @type: mixin
  @html: Use it to handle a layout with grid columns
    <div class="some-container">
      <div class="column">
        One
      </div>
      <div class="column">
        Two
      </div>
      <div class="column">
        Etc.
      </div>
    </div>
  @name: float-col
  @param: {map} ($rules) [null]
          Rules map, based on *include-media* breakpoints
  @param: {int} ($total-columns) [$row-columns-total]
          Number of columns steps, the behavior is **NOT based** on `$row-columns-style`
  @public: true
  @returns: css
  @text: Generates a column set for float grid systems, it's based on [include-media](http://include-media.com/), checkout vendors documentation post to see how to use it.
  @version: 4.0.0
*/

@mixin float-col ($rules: null, $total-columns: $row-columns-total) {
  display: block;
  float: left;
  @each $rule, $column-number in $rules {
    @include media($rule) {
      width: step($column-number, $total-columns);
    }
  }
}

/*
  @a-pollo-doc
  @author: Vittorio Vittori
  @title: Float grid system
  @code: Example on using the mixin with some static property
    $breakpoints: (
      'mobile-small': 320px,
      'mobile-large': 480px,
      'tablet-small': 768px,
      'tablet-large': 1024px,
      'desktop-small': 1280px,
      'desktop-large': 1800px
    );

    .column {
      @include float-col((
          '<=mobile-large': 10,
          '<=tablet-small': 6,
          '<=tablet-large': 4,
          '>tablet-large': 2
      ), 10);
    }
  @css: This is the CSS generated
    .column {
      display: block;
      float: left;
    }

    @media (max-width: 480px) {
      .column {
        width: 100%;
      }
    }

    @media (max-width: 768px) {
      .column {
        width: 60%;
      }
    }

    @media (max-width: 1024px) {
      .column {
        width: 40%;
      }
    }

    @media (min-width: 1025px) {
      .column {
        width: 20%;
      }
    }
  @date: 2017-05-04T17:56:07+02:00
  @type: mixin
  @html: Use it to handle a layout with grid columns
    <div class="some-container">
      <div class="column">
        One
      </div>
      <div class="column">
        Two
      </div>
      <div class="column">
        Etc.
      </div>
    </div>
  @name: float-col-offset
  @param: {map} ($rules) [null]
          Rules map, based on *include-media* breakpoints
  @param: {int} ($total-columns) [$row-columns-total]
          Number of columns steps, the behavior is **NOT based** on `$row-columns-style`
  @public: true
  @returns: css
  @text: Generates a column set for float grid systems, it's based on [include-media](http://include-media.com/), checkout vendors documentation post to see how to use it.
  @version: 4.0.0
*/

@mixin float-col-offset ($rules: null, $total-columns: $row-columns-total) {
  @each $rule, $column-number in $rules {
    @include media($rule) {
      margin-left: step($column-number, $total-columns);
    }
  }
}
