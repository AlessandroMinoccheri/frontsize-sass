// ========================================================================================================================================================================
// ==                                   ===================================================================================================================================
// ==               CSS 3               ===================================================================================================================================
// ==           CROSS BROWSER           ===================================================================================================================================
// ==        COMPATIBILITY MIXINS       ===================================================================================================================================
// ==                                   ===================================================================================================================================
// ========================================================================================================================================================================

// For more compatibility details:
// http://caniuse.com/

@mixin transition($transition:0.3s ease-in-out initial) {
 	@if $use-css-prefix == true{
 		-webkit-transition: #{$transition};
		-khtml-transition: #{$transition};
		-moz-transition: #{$transition};
		-ms-transition: #{$transition};
		-o-transition: #{$transition};
 	}
 	transition: #{$transition};
}

@mixin transition-delay($delay:0.5s) {
    @if $use-css-prefix == true {
		-webkit-transition: #{$delay};
		-khtml-transition: #{$delay};
		-moz-transition: #{$delay};
		-ms-transition: #{$delay};
		-o-transition: #{$delay};
	}
	transition-delay: #{$delay};
}

@mixin transition-duration($duration:0.5s) {
    @if $use-css-prefix == true {
		-webkit-transition-duration: #{$duration};
		-khtml-transition-duration: #{$duration};
		-moz-transition-duration: #{$duration};
		-ms-transition-duration: #{$duration};
		-o-transition-duration: #{$duration};
	}
	transition-duration: #{$duration};
}

@mixin transition-property($property:all) {
	@if $use-css-prefix == true and $property != "transform"{
		-webkit-transition-property: #{$property};
		-khtml-transition-property: #{$property};
		-moz-transition-property: #{$property};
		-ms-transition-property: #{$property};
		-o-transition-property: #{$property};
	}
	@if $use-css-prefix == true and $property == "transform" {
		-webkit-transition-property:-webkit-transform;
		-khtml-transition-property:-khtml-transform;
		-moz-transition-property:-moz-transform;
		-ms-transition-property:-ms-transform;
		-o-transition-property:-o-transform;
		transition-property:transform;
	}
	@if $property != "transform"{
		transition-property: #{$property};
	}
}

@mixin transition-timing-function($easing:ease-in-out) {
    @if $use-css-prefix == true {
		-webkit-transition-timing-function: #{$easing};
		-khtml-transition-timing-function: #{$easing};
		-moz-transition-timing-function: #{$easing};
		-ms-transition-timing-function: #{$easing};
		-o-transition-timing-function: #{$easing};
	}
	transition-timing-function: #{$easing};
}

@mixin globalPlaceholder($color:#999999, $focused:#CCCCCC, $fontFamily:$font-default) {
	// sets the color of the input text placeholder attribute
	@if $use-css-prefix == true {
		::-webkit-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus::-webkit-input-placeholder {
			color: $focused;
		}
		:-khtml-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus:-khtml-input-placeholder {
			color: $focused;
		}
		:-moz-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus:-moz-placeholder {
			color: $focused;
		}
		::-moz-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus::-moz-placeholder {
			color: $focused;
		}
		:-ms-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus:-ms-input-placeholder {
			color: $focused;
		}
		:-o-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		input:focus:-o-input-placeholder {
			color: $focused;
		}
	}
	:input-placeholder {
		color: $color;
		font-family: $fontFamily;
	}
	input:focus:input-placeholder {
		color: $focused;
	}
}

@mixin input-placeholder($color:#999999, $focused:#CCCCCC, $fontFamily:$font-default) {
	// sets the color of the input text placeholder attribute
	@if $use-css-prefix == true {
		&::-webkit-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus::-webkit-input-placeholder {
			color: $focused;
		}
		&:-khtml-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus:-khtml-input-placeholder {
			color: $focused;
		}
		&:-moz-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus:-moz-placeholder {
			color: $focused;
		}
		&::-moz-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus::-moz-placeholder {
			color: $focused;
		}
		&:-ms-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus:-ms-input-placeholder {
			color: $focused;
		}
		&:-o-input-placeholder {
			color: $color;
			font-family: $fontFamily;
		}
		&:focus:-o-input-placeholder {
			color: $focused;
		}
	}
	&:input-placeholder { 
		color: $color;
		font-family: $fontFamily;
	}
	&:focus:input-placeholder { 
		color: $focused;
	}
}

@mixin globalSelection($text-color:inherit, $background-color:inherit) {
	// Sets the color of the text selection area and the color of the text selected
	@if $use-css-prefix == true {
		::-moz-selection {
			background: $background-color;
			color: $text-color;
		}
		img::-moz-selection	{
			background: transparent;
		}
		::-moz-focus-inner {
			border: 0;
		}
	}
	::selection {
		background: $background-color; 
		color: $text-color;
	}
	img::selection {
		background: transparent;
	}
}

@mixin selection($text-color:inherit, $background-color:inherit) {
	// Sets the color of the text selection area and the color of the text selected
	@if $use-css-prefix == true {
		&::-moz-selection {
			background: $background-color;
			color: $text-color;
		}
		&::-moz-focus-inner {
			border: 0;
		}
	}
	&::selection {
		background: $background-color;
		color: $text-color;
	}
}

@mixin font-smoothing($antialias:antialiased, $forcePrefixes:true) {
	// added @forcePrefixes to prevent font-smoothing to be skipped when use-css-prefix is false, this is for Chrome only for now
	@if $forcePrefixes == true{
	    -webkit-font-smoothing: #{$antialias};
		-khtml-font-smoothing: #{$antialias};
		-moz-font-smoothing: #{$antialias};
		-ms-font-smoothing: #{$antialias};
		-o-font-smoothing: #{$antialias};
 	}
 	@else{
 		@if $use-css-prefix == true and $forcePrefixes != true{
		    -webkit-font-smoothing: #{$antialias};
			-khtml-font-smoothing: #{$antialias};
			-moz-font-smoothing: #{$antialias};
			-ms-font-smoothing: #{$antialias};
			-o-font-smoothing: #{$antialias};
	 	}
 	}
 	// Sets the antialias text for the whole page
    // Values: antialiased | subpixel-antialiased | none
    // this property is not listed in CSS3 specification
    // font-smooth: @antialias;
}

@mixin column-count($count:auto) {
	// Url - http://www.w3schools.com/cssref/css3_pr_column-count.asp
	@if $use-css-prefix == true {
		-webkit-column-count: #{$count};
		-khtml-column-count: #{$count};
		-moz-column-count: #{$count};
		-ms-column-count: #{$count};
		-o-column-count: #{$count};
	}
	column-count: #{$count};
}

@mixin column-gap($gap:normal) {
	// Url - http://www.w3schools.com/cssref/css3_pr_column-gap.asp
	@if $use-css-prefix == true {
		-webkit-column-gap: #{$gap};
		-khtml-column-gap: #{$gap};
		-moz-column-gap: #{$gap};
		-ms-column-gap: #{$gap};
		-o-column-gap: #{$gap};
	}
	column-gap: #{$gap};
}

@mixin column-rule($rule:medium none black) {
	// Url - http://www.w3schools.com/cssref/css3_pr_column-rule.asp
	@if $use-css-prefix == true {
		-webkit-column-rule: #{$rule};
		-khtml-column-rule: #{$rule};
		-moz-column-rule: #{$rule};
		-ms-column-rule: #{$rule};
		-o-column-rule: #{$rule};
	}
	column-rule: #{$rule};
}

@mixin column-span($span:1) {
	// Url - http://www.w3schools.com/cssref/css3_pr_column-span.asp
	// The column-span property specifies how many columns an element should span across.
	// The CSS column-span property allows content to span across multiple columns on a multi-column layout.
	// This can be useful if you have a heading or other element within the multicol layout that needs to span across all columns.
	// Values: 1 | none | all;
	@if $use-css-prefix == true {
		-webkit-column-span: #{$span};
		-khtml-column-span: #{$span};
		-moz-column-span: #{$span};
		-ms-column-span: #{$span};
		-o-column-span: #{$span};
	}
	column-span: #{$span};
}

@mixin column-width($rule:auto) {
	// Url - http://www.w3schools.com/cssref/css3_pr_column-width.asp
	// The column-width property specifies the width of the columns.
	@if $use-css-prefix == true {
		-webkit-column-width: #{$rule};
		-khtml-column-width: #{$rule};
		-moz-column-width: #{$rule};
		-ms-column-width: #{$rule};
		-o-column-width: #{$rule};
	}
	column-width: #{$rule};
}

@mixin columns($columns:auto auto) {
	// Url - http://www.w3schools.com/cssref/css3_pr_columns.asp
	// The columns property is a shorthand property for setting column-width and column-count.
	@if $use-css-prefix == true {
		-webkit-columns: #{$columns};
		-khtml-columns: #{$columns};
		-moz-columns: #{$columns};
		-ms-columns: #{$columns};
		-o-columns: #{$columns};
	}
	columns: #{$columns};
}

@mixin border-radius($radius:6px) {
	// sets a radius to the angles of the element
	// Default usage
	// .border-radius(top-left-radius top-right-radius bottom-right-radius bottom-left-radius);
	// .border-radius(4px);
	// .border-radius(4px 6px 8px 10px);
	@if $use-css-prefix == true {
		-webkit-border-radius: #{$radius};
		-khtml-border-radius: #{$radius};
		-moz-border-radius: #{$radius};
		-ms-border-radius: #{$radius};
		-o-border-radius: #{$radius};
	}
	border-radius: #{$radius};
}

@mixin outline-radius($radius:6px) {
	@if $use-css-prefix == true {
		-webkit-outline-radius: #{$radius};
		-khtml-outline-radius: #{$radius};
		-moz-outline-radius: #{$radius};
		-ms-outline-radius: #{$radius};
		-o-outline-radius: #{$radius};
	}
	outline-radius: #{$radius};
}

@mixin border-image($params) {
	// Specify an image as the border around an element
	// Url - http://www.w3schools.com/cssref/css3_pr_border-image.asp
	// Defaut usage
	// .border-image(url(border.png) 30 30 round);
	@if $use-css-prefix == true {
		-webkit-border-image: #{$params};
		-khtml-border-image: #{$params};
		-moz-border-image: #{$params};
		-ms-border-image: #{$params};
		-o-border-image: #{$params};
	}
	border-image: #{$params};
}
@mixin displayBox() {
	@if $use-css-prefix == true {
		display: -webkit-box;
		display: -ms-flexbox;
		display: -khtml-box;
		display: -moz-box;
		display: -o-box;
	}
	display: box;
}

@mixin interpolation-mode($interpolation: bicubic) {
	@if $use-css-prefix == true {
		-ms-interpolation-mode: $interpolation;
	}
	// This property is not listed in CSS3 specification
	// interpolation-mode: $interpolation;
}

@mixin box-align($align:stretch) {
	// The box-align property specifies how to align the child elements of a box.
	// Url - http://www.w3schools.com/cssref/css3_pr_box-align.asp
	// Values: start | end | center | baseline | stretch
	@if $use-css-prefix == true {
		-webkit-box-align: #{$align};
		-khtml-box-align: #{$align};
		-moz-box-align: #{$align};
		-ms-box-align: #{$align};
		-o-box-align: #{$align};
	}
	box-align: #{$align};
}

@mixin box-direction($direction:normal) {
	// The box-direction property specifies the direction in which child elements of a box element are laid out.
	// Url - http://www.w3schools.com/cssref/css3_pr_box-direction.asp
	// Values: normal | reverse | inherit
	@if $use-css-prefix == true {
		-webkit-box-direction: #{$direction};
		-khtml-box-direction: #{$direction};
		-moz-box-direction: #{$direction};
		-ms-box-direction: #{$direction};
		-o-box-direction: #{$direction};
	}
	box-direction: #{$direction};
}

@mixin box-flex($flexibility:0.0) {
	// The box-flex property specifies whether the child elements of a box is flexible or inflexible in size.
	// Tip: Elements that are flexible can shrink or grow as the box shrinks and grows. Whenever there is extra space in a box, flexible elements are expanded to fill that space.
	// Values: 0.0 | 0.5 | 1 | etc.
	// Notice: The container element must have display property set to box as in the example above
	// .container {
	//     .display-box();
	//     .children {
	//         .box-flex();
	//     }
	// }
	@if $use-css-prefix == true {
		-webkit-box-flex: #{$flexibility};
		-khtml-box-flex: #{$flexibility};
		-moz-box-flex: #{$flexibility};
		-ms-box-flex: #{$flexibility};
		-o-box-flex: #{$flexibility};
	}
	box-flex: #{$flexibility};
}

@mixin box-ordinal-group($order:1) {
	// Url - http://www.w3schools.com/cssref/css3_pr_box-ordinal-group.asp
	// The box-ordinal-group property specifies the display order of the child elements of a box.
	// Elements with a lower value are displayed before those with a higher value.
	// Note: The display order of the elements with the same group value depend on their source order.
	// Values: integers
	// Notice: The container element must have display property set to box as in the example above
	// .container {
	//     .display-box();
	//     .children-1 {
	//         .box-ordinal-group(2);
	//     }
	//     .children-2 {
	//         .box-ordinal-group(1);
	//     }
	// }
	@if $use-css-prefix == true {
		-webkit-box-ordinal-group: #{$order};
		-khtml-box-ordinal-group: #{$order};
		-moz-box-ordinal-group: #{$order};
		-ms-box-ordinal-group: #{$order};
		-o-box-ordinal-group: #{$order};
		-ms-flex-order: #{$order};
	}
	box-ordinal-group: #{$order};
}

@mixin box-orient($orient:inline-axis) {
	// Url - http://www.w3schools.com/cssref/css3_pr_box-orient.asp
	// The box-orient property specifies whether the children of a box should be laid out horizontally or vertically.
	// Tip: Children within a horizontal box are displayed from left to right, and children within a vertical box are displayed top to bottom. However, the box-direction and box-ordinal-group properties can change this ordering.
	// Values: horizontal | vertical | inline-axis | block-axis | inherit
	// Notice: The container element must have display property set to box as in the example above
	// .container {
	//     .display-box();
	//     .children-1 {
	//         .box-ordinal-group(2);
	//     }
	//     .children-2 {
	//         .box-ordinal-group(1);
	//     }
	// }
	@if $use-css-prefix == true {
		-webkit-box-orient: #{$orient};
		-khtml-box-orient: #{$orient};
		-moz-box-orient: #{$orient};
		-ms-flex-orient: #{$orient};
		-ms-box-orient: #{$orient};
		-o-box-orient: #{$orient};
	}
	box-orient: #{$orient};
}

@mixin box-pack($pack) {
	// Url - http://www.w3schools.com/cssref/css3_pr_box-pack.asp
	// The box-pack property specifies where child elements of a box are placed when the box is larger than the size of the children.
	// This property specifies the horizontal position in horizontal boxes, and the vertical position in vertical boxes.
	// Values: start | end | center | justify
	// Notice: The container element must have display property set to box as in the example above
	// .container {
	//     .displayBox();
	//     .children-1 {
	//         .box-ordinal-group(2);
	//     }
	//     .children-2 {
	//         .box-ordinal-group(1);
	//     }
	// }
	@if $use-css-prefix == true {
		-webkit-box-pack: #{$pack};
		-khtml-box-pack: #{$pack};
		-moz-box-pack: #{$pack};
		-ms-flex-pack: #{$pack};
		-ms-box-pack: #{$pack};
		-o-box-pack: #{$pack};
	}
	box-pack: #{$pack};
}

@mixin box-sizing($sizing:content-box) {
	// Url - http://www.w3schools.com/cssref/css3_pr_box-sizing.asp
	// The box-sizing property allows you to define certain elements to fit an area in a certain way.
	// For example, if you want two bordered boxes side by side, it can be achieved through setting box-sizing to "border-box". This forces the browser to render the box with the specified width and height, and place the border and padding inside the box.
	// Values: content-box | border-box | inherit
	@if $use-css-prefix == true {
		-webkit-box-sizing: #{$sizing};
		-khtml-box-sizing: #{$sizing};
		-moz-box-sizing: #{$sizing};
		-ms-box-sizing: #{$sizing};
		-o-box-sizing: #{$sizing};
	}
	box-sizing: #{$sizing};
}

@mixin box-shadow($params:0 0 1px rgba(0,0,0,.3)) {
	// Sets the shadow of the element
	// .box-shadow(x y blur [expand] color [inset]);
	// .box-shadow(1px 2px 4px rgba(0,0,0,.3));
	// .box-shadow(0px 2px 4px -1px rgba(0,0,0,.3), inset 0px 1px 4px rgba(255,255,255,.5););
	@if $use-css-prefix == true {
		-webkit-box-shadow: #{$params};
		-khtml-box-shadow: #{$params};
		-moz-box-shadow: #{$params};
		-ms-box-shadow: #{$params};
		-o-box-shadow: #{$params};
	}
	box-shadow: #{$params};
}

@mixin transform($transform:none) {
	// The transform property applies a 2D or 3D transformation to an element. This property allows you to rotate, scale, move, skew, etc., elements.
	// Possible values: none|transform-functions
	// Url - http://www.w3schools.com/cssref/css3_pr_transform.asp
	@if $use-css-prefix == true {
		-webkit-transform: #{$transform};
		-khtml-transform: #{$transform};
		-moz-transform: #{$transform};
		-ms-transform: #{$transform};
		-o-transform: #{$transform};
	}
	transform: #{$transform};
}

@mixin filter($filter) {
	@if $use-css-prefix == true {
		-webkit-filter: #{$filter};
		-khtml-filter: #{$filter};
		-moz-filter: #{$filter};
		-ms-filter: #{$filter};
		-o-filter: #{$filter};
	}
	filter: #{$filter};
}

@mixin backface-visibility($visibility:visible) {
	// The backface-visibility property defines whether or not an element should be visible when not facing the screen.
	// This property is useful when an element is rotated, and you do not want to see its backside.
	// Url - http://www.w3schools.com/cssref/css3_pr_backface-visibility.asp
	// Values: visible | hidden
	@if $use-css-prefix == true {
		-webkit-backface-visibility: #{$visibility};
		-khtml-backface-visibility: #{$visibility};
		-moz-backface-visibility: #{$visibility};
		-ms-backface-visibility: #{$visibility};
		-o-backface-visibility: #{$visibility};
	}
	backface-visibility: #{$visibility};
}

@mixin transform-style($style:flat) {
	// The transform-style property specifies how nested elements are rendered in 3D space.
	// Url - http://www.w3schools.com/cssref/css3_pr_transform-style.asp
	// Values: flat | preserve-3d
	@if $use-css-prefix == true {
		-webkit-transform-style: #{$style};
		-khtml-transform-style: #{$style};
		-moz-transform-style: #{$style};
		-ms-transform-style: #{$style};
		-o-transform-style: #{$style};
	}
	transform-style: #{$style};
}

@mixin resize($resize:none) {
	// The resize property specifies whether or not an element is resizable by the user.
	// Url - http://www.w3schools.com/cssref/css3_pr_resize.asp
	// Values: none | both | horizontal | vertical
	@if $use-css-prefix == true {
		-webkit-resize: #{$resize};
		-khtml-resize: #{$resize};
		-moz-resize: #{$resize};
		-ms-resize: #{$resize};
		-o-resize: #{$resize};
	}
	resize: #{$resize};
	overflow: auto;
}

@mixin hyphens($hyphens:none) {
	// Sets how to split words to improve the layout of paragraphs
	// Url - http://www.w3schools.com/cssref/css3_pr_resize.asp
	// Values: none | both | horizontal | vertical
	@if $use-css-prefix == true {
		-webkit-hyphens: #{$hyphens};
		-khtml-hyphens: #{$hyphens};
		-moz-hyphens: #{$hyphens};
		-ms-hyphens: #{$hyphens};
		-o-hyphens: #{$hyphens};
	}
	hyphens: #{$hyphens};
	word-wrap: break-word;
}

@mixin image-resolution($resolution:1dppx) {
	// http://www.w3.org/TR/css3-images/#image-resolution
	// Values: from-image | snap | dpi
	@if $use-css-prefix == true {
		-webkit-image-resolution: #{$resolution};
		-khtml-image-resolution: #{$resolution};
		-moz-image-resolution: #{$resolution};
		-ms-image-resolution: #{$resolution};
		-o-image-resolution: #{$resolution};
	}
	image-resolution:#{$resolution};
}

@mixin marks($marks:none) {
	// This property specifies what sort of marks should be rendered just outside the rendered page box.
	// The characteristics and position of the marks will be browser dependent.
	// Values: inherit | none | crop | cross | crop cross
	@if $use-css-prefix == true {
		-webkit-marks: #{$marks};
		-khtml-marks: #{$marks};
		-moz-marks: #{$marks};
		-ms-marks: #{$marks};
		-o-marks: #{$marks};
	}
	marks:#{$marks};
}

@mixin appearance($appearence:normal, $forcePrefixes:true) {
	@if $use-css-prefix == false{
		-webkit-appearance:#{$appearence};
		-khtml-appearance: #{$appearence};
	    -moz-appearance: normal;
		-ms-appearance: #{$appearence};
		// -o-appearance: @appearence;     // not working for elements radio and checkbox
	}
	@else{
		@if $use-css-prefix == true{
			-webkit-appearance: #{$appearence};
			-khtml-appearance: #{$appearence};
			-moz-appearance: normal;
			-ms-appearance: #{$appearence};
			-o-appearance: #{$appearence};
		}
	}
	// The appearance property allows you to make an element look like a standard user interface element.
    // Url - http://css-tricks.com/almanac/properties/a/appearance/
    // Webkit values: checkbox | radio | push-button | square-button | button | button-bevel | listbox | listitem | menulist | menulist-button | menulist-text | menulist-textfield | scrollbarbutton-up | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbartrack-horizontal | scrollbartrack-vertical | scrollbarthumb-horizontal | scrollbarthumb-vertical | scrollbargripper-horizontal | scrollbargripper-vertical | slider-horizontal | slider-vertical | sliderthumb-horizontal | sliderthumb-vertical | caret | searchfield | searchfield-decoration | searchfield-results-decoration | searchfield-results-button | searchfield-cancel-button | textfield | textarea;
    // Mozilla values: none | button | checkbox | checkbox-container | checkbox-small | dialog | listbox | menuitem | menulist | menulist-button | menulist-textfield | menupopup | progressbar | radio | radio-container | radio-small | resizer | scrollbar | scrollbarbutton-down | scrollbarbutton-left | scrollbarbutton-right | scrollbarbutton-up | scrollbartrack-horizontal | scrollbartrack-vertical | separator | statusbar | tab | tab-left-edge Obsolete | tabpanels | textfield | textfield-multiline | toolbar | toolbarbutton | toolbox | -moz-mac-unified-toolbar | -moz-win-borderless-glass | -moz-win-browsertabbar-toolbox | -moz-win-communications-toolbox | -moz-win-glass | -moz-win-media-toolbox | tooltip | treeheadercell | treeheadersortarrow | treeitem | treetwisty | treetwistyopen | treeview | window;
    // Code snippet:
    // .appearance(button);
    appearance: #{$appearence};
}

@mixin linear-gradient($gradient:"top, #FFFFFF, #000000") {
	@if $use-css-prefix == true {
		background: -webkit-linear-gradient(#{$gradient});
		background: -khtml-linear-gradient(#{$gradient});
		background: -moz-linear-gradient(#{$gradient});
		background: -ms-linear-gradient(#{$gradient});
		background: -o-linear-gradient(#{$gradient});
	}
	background: linear-gradient(#{$gradient});
}

@mixin background-origin($origin:padding-box) {
	// The background-origin property specifies what the background-position property should be relative to.
	// Url - http://www.w3schools.com/cssref/css3_pr_background-origin.asp
	// Values: padding-box | border-box | content-box;
	// Code snippet:
	// .background-origin(border-box);
	@if $use-css-prefix == true {
		-webkit-background-origin: #{$origin};
		-khtml-background-origin: #{$origin};
		-moz-background-origin: #{$origin};
		-ms-background-origin: #{$origin};
		-o-background-origin: #{$origin};
	}
	background-origin: #{$origin};
}

@mixin background-clip($clip:border-box) {
	// The background-clip property specifies the painting area of the background.
	// Url - http://www.w3schools.com/cssref/css3_pr_background-clip.asp
	// Values: border-box | padding-box | content-box;
	// Code snippet:
	// .background-clip(border-box);
	@if $use-css-prefix == true {
		-webkit-background-clip: #{$clip};
		-khtml-background-clip: #{$clip};
		-moz-background-clip: #{$clip};
		-ms-background-clip: #{$clip};
		-o-background-clip: #{$clip};
	}
	background-clip: #{$clip};
}

@mixin user-select($select:text) {
	// it disables text selection
	// Values: none | text | toggle | element | elements | all | inherit	
	@if $use-css-prefix == true{
		-webkit-touch-callout: #{$select};
		-khtml-user-select: #{$select};
		-webkit-user-select: #{$select};
		-moz-user-select: #{$select};
		-ms-user-select: #{$select};
		-o-user-select: #{$select};
	}   
	user-select: #{$select};
}

@mixin opacity($opacity:1) {
	@if $use-css-prefix == true {
		-khtml-opacity: #{$opacity};
		-moz-opacity: #{$opacity};
		@if $use-ie-filters == true {
			$msOpacity:(#{$opacity} * 100);
			-ms-filter:progid:DXImageTransform.Microsoft.Alpha(Opacity=#{$msOpacity});
			filter:alpha(opacity=#{$msOpacity});
		}
	}
	opacity:#{$opacity};
}

@mixin text-overflow($overflow:ellipsis) {
	@if $use-css-prefix == true {
		-ms-text-overflow: #{$overflow};
	}
	text-overflow: #{$overflow};
}

@mixin text-fill-color($color:transparent) {
	@if $use-css-prefix == true {
		-webkit-text-fill-color: #{$color};
		-khtml-text-fill-color: #{$color};
		-moz-text-fill-color: #{$color};
		-ms-text-fill-color: #{$color};
		-o-text-fill-color: #{$color};
	}
	text-fill-color: #{$color};
}

@mixin text-stroke-color($color:black) {
	@if $use-css-prefix == true {
		-webkit-text-stroke-color: #{$color};
		-khtml-text-stroke-color: #{$color};
		-moz-text-stroke-color: #{$color};
		-ms-text-stroke-color: #{$color};
		-o-text-stroke-color: #{$color};
	}
	text-stroke-color: #{$color};
}

@mixin text-stroke-width($width:1px) {
	@if $use-css-prefix == true {
		-webkit-text-stroke-width: #{$width};
		-khtml-text-stroke-width: #{$width};
		-moz-text-stroke-width: #{$width};
		-ms-text-stroke-width: #{$width};
		-o-text-stroke-width: #{$width};
	}
	text-stroke-width: #{$width};
}

@mixin text-stroke($textStroke:"1px black") {
	@if $use-css-prefix == true {
		-webkit-text-stroke: #{$textStroke};
		-khtml-text-stroke: #{$textStroke};
		-moz-text-stroke: #{$textStroke};
		-ms-text-stroke: #{$textStroke};
		-o-text-stroke: #{$textStroke};
	}
	text-stroke: #{$textStroke};
}
